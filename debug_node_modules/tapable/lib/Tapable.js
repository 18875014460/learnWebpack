/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

// polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
// using the polyfill specifically to avoid the call to `Object.defineProperty` for performance reasons
function fastFilter(fun/*, thisArg*/) {
	'use strict';

	if (this === void 0 || this === null) {
		throw new TypeError();
	}

	var t = Object(this);
	var len = t.length >>> 0;
	if (typeof fun !== 'function') {
		throw new TypeError();
	}

	var res = [];
	var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
	for (var i = 0; i < len; i++) {
		if (i in t) {
			var val = t[i];

			// NOTE: Technically this should Object.defineProperty at
			//       the next index, as push can be affected by
			//       properties on Object.prototype and Array.prototype.
			//       But that method's new, and collisions should be
			//       rare, so use the more-compatible alternative.
			if (fun.call(thisArg, val, i, t)) {
				res.push(val);
			}
		}
	}

	return res;
}

/**
 * @description Tapable构造函数。Tapable类提供了注册事件，以及触发事件的功能。
 * 是webpack的基于事件流的插件机制的基础
 */
function Tapable() {
  // 私有属性_plugins用来保存注册进来的事件。下面是注册进来的test事件以及回调钩子的示例：
  /** 
   * this._plugins = {
   *   test: [handlerFun1, handlerFun2]
   *   ...
   * } 
   */  
	this._plugins = {};
}
module.exports = Tapable;

function copyProperties(from, to) {
	for(var key in from)
		to[key] = from[key];
	return to;
}

Tapable.mixin = function mixinTapable(pt) {
	copyProperties(Tapable.prototype, pt);
};

/**
 * 触发指定事件，按顺序回调所有事件钩子，默认第一个参数是事件名。
 * 把事件名以外的参数传入到每一个回调钩子函数
 * @param {*} name 
 */
Tapable.prototype.applyPlugins = function applyPlugins(name) {
  if(!this._plugins[name]) return;
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
  // 取出除了第一个以外，剩下的参数（第一个参数是事件名）
	var args = Array.prototype.slice.call(arguments, 1);
	var plugins = this._plugins[name];
	for(var i = 0; i < plugins.length; i++)
		plugins[i].apply(this, args);
};

/**
 * 触发指定事件，按顺序回调所有事件钩子，默认第一个参数是事件名
 * 不传入任何参数给回调钩子
 * @param {*} name 
 */
Tapable.prototype.applyPlugins0 = function applyPlugins0(name) {
	var plugins = this._plugins[name];
  if(!plugins) return;
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
	for(var i = 0; i < plugins.length; i++)
		plugins[i].call(this);
};

/**
 * 触发指定事件，按顺序回调所有事件钩子，默认第一个参数是事件名
 * 第二个参数是传递给回调钩子的参数
 * @param {*} name 事件名
 * @param {*} param 传给回调钩子的参数
 */
Tapable.prototype.applyPlugins1 = function applyPlugins1(name, param) {
	var plugins = this._plugins[name];
  if(!plugins) return;
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
	for(var i = 0; i < plugins.length; i++)
	for(var i = 0; i < plugins.length; i++)
		plugins[i].call(this, param);
};

/**
 * 触发指定事件，按顺序回调所有事件钩子，默认第一个参数是事件名
 * 第二、三个参数是传递给回调钩子的参数
 * @param {*} name 
 * @param {*} param1 
 * @param {*} param2 
 */
Tapable.prototype.applyPlugins2 = function applyPlugins2(name, param1, param2) {
	var plugins = this._plugins[name];
  if(!plugins) return;
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
	for(var i = 0; i < plugins.length; i++)
		plugins[i].call(this, param1, param2);
};

/**
 * 顾名思义，这个方法相当于是 瀑布式 调用，给第一个插件传入初始对象 init，然后经过第一个插件调用之后会获得一个结果对象，
 * 该结果对象会传给下一个插件 作为初始值，直到最后调用完毕，最后一个插件的直接结果传给 callback 作为初始值；
 * @param {*} name 
 * @param {*} init 
 */
Tapable.prototype.applyPluginsWaterfall = function applyPluginsWaterfall(name, init) {
	if(!this._plugins[name]) return init;
	var args = Array.prototype.slice.call(arguments, 1);
  var plugins = this._plugins[name];
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
  // init作为初始值传给第一个插件作为参数
	var current = init;
	for(var i = 0; i < plugins.length; i++) {
    args[0] = current;
    // 接收插件运行的结果作为下一个插件调用的参数
		current = plugins[i].apply(this, args);
	}
	return current;
};

Tapable.prototype.applyPluginsWaterfall0 = function applyPluginsWaterfall0(name, init) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
	var plugins = this._plugins[name];
	if(!plugins) return init;
	var current = init;
	for(var i = 0; i < plugins.length; i++)
		current = plugins[i].call(this, current);
	return current;
};

Tapable.prototype.applyPluginsWaterfall1 = function applyPluginsWaterfall1(name, init, param) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
	var plugins = this._plugins[name];
	if(!plugins) return init;
	var current = init;
	for(var i = 0; i < plugins.length; i++)
		current = plugins[i].call(this, current, param);
	return current;
};

Tapable.prototype.applyPluginsWaterfall2 = function applyPluginsWaterfall2(name, init, param1, param2) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
	var plugins = this._plugins[name];
	if(!plugins) return init;
	var current = init;
	for(var i = 0; i < plugins.length; i++)
		current = plugins[i].call(this, current, param1, param2);
	return current;
};

Tapable.prototype.applyPluginsBailResult = function applyPluginsBailResult(name) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
	if(!this._plugins[name]) return;
	var args = Array.prototype.slice.call(arguments, 1);
	var plugins = this._plugins[name];
	for(var i = 0; i < plugins.length; i++) {
		var result = plugins[i].apply(this, args);
		if(typeof result !== "undefined") {
			return result;
		}
	}
};

Tapable.prototype.applyPluginsBailResult1 = function applyPluginsBailResult1(name, param) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
	if(!this._plugins[name]) return;
	var plugins = this._plugins[name];
	for(var i = 0; i < plugins.length; i++) {
		var result = plugins[i].call(this, param);
		if(typeof result !== "undefined") {
			return result;
		}
	}
};

Tapable.prototype.applyPluginsBailResult2 = function applyPluginsBailResult2(name, param1, param2) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
	if(!this._plugins[name]) return;
	var plugins = this._plugins[name];
	for(var i = 0; i < plugins.length; i++) {
		var result = plugins[i].call(this, param1, param2);
		if(typeof result !== "undefined") {
			return result;
		}
	}
};

Tapable.prototype.applyPluginsBailResult3 = function applyPluginsBailResult3(name, param1, param2, param3) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
	if(!this._plugins[name]) return;
	var plugins = this._plugins[name];
	for(var i = 0; i < plugins.length; i++) {
		var result = plugins[i].call(this, param1, param2, param3);
		if(typeof result !== "undefined") {
			return result;
		}
	}
};

Tapable.prototype.applyPluginsBailResult4 = function applyPluginsBailResult4(name, param1, param2, param3, param4) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
  if(!this._plugins[name]) return;
	var plugins = this._plugins[name];
	for(var i = 0; i < plugins.length; i++) {
		var result = plugins[i].call(this, param1, param2, param3, param4);
		if(typeof result !== "undefined") {
			return result;
		}
	}
};

Tapable.prototype.applyPluginsBailResult5 = function applyPluginsBailResult5(name, param1, param2, param3, param4, param5) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
  if(!this._plugins[name]) return;
	var plugins = this._plugins[name];
	for(var i = 0; i < plugins.length; i++) {
		var result = plugins[i].call(this, param1, param2, param3, param4, param5);
		if(typeof result !== "undefined") {
			return result;
		}
	}
};

/**
 * @description 触发指定事件，并且顺序的回调注册好的回调钩子。但是每个回调钩子需要显式的回调最后一个回调函数，
 * 来进行下一个回调钩子的调用。
 * 否则下一个回调钩子不会触发，中断后续的钩子继续回调
 */
Tapable.prototype.applyPluginsAsyncSeries = Tapable.prototype.applyPluginsAsync = function applyPluginsAsyncSeries(name) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
  var args = Array.prototype.slice.call(arguments, 1);
	var callback = args.pop();
	var plugins = this._plugins[name];
	if(!plugins || plugins.length === 0) return callback();
	var i = 0;
	var _this = this;
	args.push(copyProperties(callback, function next(err) {
		if(err) return callback(err);
		i++;
		if(i >= plugins.length) {
			return callback();
		}
		plugins[i].apply(_this, args);
	}));
	plugins[0].apply(this, args);
};

Tapable.prototype.applyPluginsAsyncSeries1 = function applyPluginsAsyncSeries1(name, param, callback) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
  var plugins = this._plugins[name];
	if(!plugins || plugins.length === 0) return callback();
	var i = 0;
	var _this = this;
	var innerCallback = copyProperties(callback, function next(err) {
		if(err) return callback(err);
		i++;
		if(i >= plugins.length) {
			return callback();
		}
		plugins[i].call(_this, param, innerCallback);
	});
	plugins[0].call(this, param, innerCallback);
};

Tapable.prototype.applyPluginsAsyncSeriesBailResult = function applyPluginsAsyncSeriesBailResult(name) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
  var args = Array.prototype.slice.call(arguments, 1);
	var callback = args.pop();
	if(!this._plugins[name] || this._plugins[name].length === 0) return callback();
	var plugins = this._plugins[name];
	var i = 0;
	var _this = this;
	args.push(copyProperties(callback, function next() {
		if(arguments.length > 0) return callback.apply(null, arguments);
		i++;
		if(i >= plugins.length) {
			return callback();
		}
		plugins[i].apply(_this, args);
	}));
	plugins[0].apply(this, args);
};

Tapable.prototype.applyPluginsAsyncSeriesBailResult1 = function applyPluginsAsyncSeriesBailResult1(name, param, callback) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
  var plugins = this._plugins[name];
	if(!plugins || plugins.length === 0) return callback();
	var i = 0;
	var _this = this;
	var innerCallback = copyProperties(callback, function next(err, result) {
		if(arguments.length > 0) return callback(err, result);
		i++;
		if(i >= plugins.length) {
			return callback();
		}
		plugins[i].call(_this, param, innerCallback);
	});
	plugins[0].call(this, param, innerCallback);
};

Tapable.prototype.applyPluginsAsyncWaterfall = function applyPluginsAsyncWaterfall(name, init, callback) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
  if(!this._plugins[name] || this._plugins[name].length === 0) return callback(null, init);
	var plugins = this._plugins[name];
	var i = 0;
	var _this = this;
	var next = copyProperties(callback, function(err, value) {
		if(err) return callback(err);
		i++;
		if(i >= plugins.length) {
			return callback(null, value);
		}
		plugins[i].call(_this, value, next);
	});
	plugins[0].call(this, init, next);
};

/**
 * 这个 applyPluginsParallel 主要功能和 最简单的 applyPlugins 方法比较相似，尝试让所有的插件运行一次
  只是相比 applyPlugins 多了一个额外的功能，它最后 提供一个 callback 函数，这个 callback 的函数比较倔强，如果所有的插件x都正常执行，
  且最后都cb()，则会在最后执行callback里的逻辑；不过，一旦其中某个插件运行出错，就会调用这个callback(err)，
  之后就算插件有错误也不会再调用该callback函数；
 * @param {} name 
 */
Tapable.prototype.applyPluginsParallel = function applyPluginsParallel(name) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);
  var args = Array.prototype.slice.call(arguments, 1);
	var callback = args.pop();
	if(!this._plugins[name] || this._plugins[name].length === 0) return callback();
	var plugins = this._plugins[name];
	var remaining = plugins.length;
	args.push(copyProperties(callback, function(err) {
		if(remaining < 0) return; // ignore
		if(err) {
      // 某个插件发生错误，回调传入err，在此将remaining设置为-1，
      // 所有插件都是同步的，都处于同一个task（microTask or macroTask），会中断掉下面for循环中后续插件的调用
			remaining = -1;
			return callback(err);
		}
		remaining--;
		if(remaining === 0) {
			return callback();
		}
	}));
	for(var i = 0; i < plugins.length; i++) {
    // 遍历运行所有的事件钩子
		plugins[i].apply(this, args);
		if(remaining < 0) return;
	}
};

Tapable.prototype.applyPluginsParallelBailResult = function applyPluginsParallelBailResult(name) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);

  var args = Array.prototype.slice.call(arguments, 1);
	var callback = args[args.length - 1];
	if(!this._plugins[name] || this._plugins[name].length === 0) return callback();
	var plugins = this._plugins[name];
	var currentPos = plugins.length;
	var currentResult;
	var done = [];
	for(var i = 0; i < plugins.length; i++) {
		args[args.length - 1] = (function(i) {
			return copyProperties(callback, function() {
				if(i >= currentPos) return; // ignore
				done.push(i);
				if(arguments.length > 0) {
					currentPos = i + 1;
					done = fastFilter.call(done, function(item) {
						return item <= i;
					});
					currentResult = Array.prototype.slice.call(arguments);
				}
				if(done.length === currentPos) {
					callback.apply(null, currentResult);
					currentPos = 0;
				}
			});
    }(i));
    // 按顺序调用所有插件，无法被打断
		plugins[i].apply(this, args);
	}
};

Tapable.prototype.applyPluginsParallelBailResult1 = function applyPluginsParallelBailResult1(name, param, callback) {
  // 打印事件触发
  this.logApply(arguments.callee.name, name);

  var plugins = this._plugins[name];
	if(!plugins || plugins.length === 0) return callback();
	var currentPos = plugins.length;
	var currentResult;
	var done = [];
	for(var i = 0; i < plugins.length; i++) {
		var innerCallback = (function(i) {
			return copyProperties(callback, function() {
				if(i >= currentPos) return; // ignore
				done.push(i);
				if(arguments.length > 0) {
					currentPos = i + 1;
					done = fastFilter.call(done, function(item) {
						return item <= i;
					});
					currentResult = Array.prototype.slice.call(arguments);
				}
				if(done.length === currentPos) {
					callback.apply(null, currentResult);
					currentPos = 0;
				}
			});
		}(i));
		plugins[i].call(this, param, innerCallback);
	}
};

Tapable.prototype.hasPlugins = function hasPlugins(name) {
	var plugins = this._plugins[name];
	return plugins && plugins.length > 0;
};

/**
 * @description 注册指定事件名，并提供回调钩子 类似于addEventListener
 * @param {string|stirng[]} name 事件名或者事件名数组
 * @param {function} fn 需要添加的回调钩子
 */
Tapable.prototype.plugin = function plugin(name, fn) {
	if(Array.isArray(name)) {
    // 如果是事件名数组，则向每一个事件名都添加回调钩子
		name.forEach(function(name) {
			this.plugin(name, fn);
		}, this);
		return;
  }
  // console.log('plugin: ' + name);
  this.logPlugin(name);
  // 向指定事件名添加回调钩子
	if(!this._plugins[name]) this._plugins[name] = [fn]; // 新建事件处理函数数组
	else this._plugins[name].push(fn);
};

/**
 * @description 传入插件实例，按参数顺序调用插件实例的apply方法，并更改apply方法的this为Tapable实例
 */
Tapable.prototype.apply = function apply() {
	for(var i = 0; i < arguments.length; i++) {
    // 调用传入的插件对象的apply方法
		arguments[i].apply(this);
	}
};

// 自定义方法，用来打印 tapable实例的 事件触发
Tapable.prototype.logApply = function (funName, eventName) {
  var className = this.constructor.name;
  console.log(className + ' ' + funName + ': ' + eventName);
}

// 自定义方法，用来打印 tapable 实例的 事件注册
Tapable.prototype.logPlugin = function(eventName) {
  var className = this.constructor.name;
  console.log(className + ' plugin: ' + eventName);
}

/** 
 * 打印结果如下：
 * Compiler plugin: before-run
Compiler plugin: this-compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: after-resolvers
Compiler plugin: compilation
Compiler plugin: entry-option
Compiler applyPluginsBailResult: entry-option
Compiler plugin: compilation
Compiler plugin: make
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: after-resolvers
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: after-emit
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: compilation
Compiler plugin: this-compilation
Compiler plugin: watch-run
Compiler plugin: run
Compiler plugin: after-compile
Compiler applyPlugins: after-resolvers
Compiler applyPluginsAsyncSeries: before-run
Compiler applyPluginsAsyncSeries: run
Compiler applyPluginsAsyncSeries: before-compile
Compiler applyPlugins: this-compilation
Compilation plugin: child-compiler
Compiler applyPlugins: compilation
Compilation plugin: normal-module-loader
Compilation plugin: normal-module-loader
Compilation plugin: optimize-chunks-basic
Compilation plugin: optimize-extracted-chunks-basic
Compilation plugin: optimize-chunks-basic
Compilation plugin: optimize-extracted-chunks-basic
Compilation plugin: optimize-chunks-basic
Compilation plugin: optimize-extracted-chunks-basic
Compilation plugin: optimize-chunks-basic
Compilation plugin: optimize-chunk-ids
Compilation plugin: optimize-module-order
Compilation plugin: optimize-chunk-order
Compilation plugin: finish-modules
Compilation plugin: optimize-modules-advanced
Compilation plugin: record-modules
Compilation plugin: revive-modules
Compilation plugin: record-chunks
Compilation plugin: revive-chunks
Compilation plugin: seal
Compiler applyPluginsParallel: make
Compilation applyPlugins: normal-module-loader
Compilation applyPlugins1: finish-modules
Compilation applyPlugins0: seal
Compilation applyPluginsBailResult1: optimize-modules-basic
Compilation applyPluginsBailResult1: optimize-modules
Compilation applyPluginsBailResult1: optimize-modules-advanced
Compilation applyPluginsBailResult1: optimize-chunks-basic
Compilation applyPluginsBailResult1: optimize-chunks
Compilation applyPluginsBailResult1: optimize-chunks-advanced
Compilation applyPluginsAsyncSeries: optimize-tree
Compilation applyPluginsBailResult: optimize-chunk-modules-basic
Compilation applyPluginsBailResult: optimize-chunk-modules
Compilation applyPluginsBailResult: optimize-chunk-modules-advanced
Compilation applyPluginsBailResult: should-record
Compilation applyPlugins2: revive-modules
Compilation applyPlugins1: optimize-module-order
Compilation applyPlugins2: revive-chunks
Compilation applyPlugins1: optimize-chunk-order
Compilation applyPlugins1: optimize-chunk-ids
Compilation applyPlugins2: record-modules
Compilation applyPlugins2: record-chunks
Compilation applyPluginsBailResult: should-generate-chunk-assets
Compilation applyPluginsAsyncSeries: additional-assets
Compilation applyPluginsAsyncSeries: optimize-chunk-assets
Compilation applyPluginsAsyncSeries: optimize-assets
Compilation applyPluginsBailResult: need-additional-seal
Compilation applyPluginsAsyncSeries: after-seal
Compiler applyPluginsAsyncSeries: after-compile
Compiler applyPluginsBailResult: should-emit
Compiler applyPluginsAsyncSeries: emit
Compiler applyPluginsAsyncSeries1: after-emit
Compilation applyPluginsBailResult: need-additional-pass
 */